# -*- coding: utf-8 -*-
"""Credit_Card.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_sKd9i513TVsMEDVgBhIdx3ee2HQBPRT
"""

import streamlit as st
import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns
import pickle

# from sklearn.preprocessing import StandardScaler
# from sklearn.model_selection import train_test_split

# from sklearn.linear_model import LogisticRegression
# from sklearn.svm import SVC
# from sklearn.neural_network import MLPClassifier

st.title('Credit Card Default Predictions')


dfselect = pd.DataFrame({
  'first column': ['statements1.xlsx','statements2.xlsx','statements3.xlsx'],
  'second column': ['Logistic Regression','Support Vector Machine','Neural Network']
})

option1 = st.sidebar.selectbox(
    'Please Select any Excel File',
     dfselect['first column'])

option2 = st.sidebar.selectbox(
    'Please Select a Model',
     dfselect['second column'])

st.subheader('Users Credit Card and Account Information')
data = pd.read_csv('UCI_Credit_Card.csv')
st.write(data[:1000])

st.write('PAY: Repayment status  LIMIT_BAL: Amount of given credit in dollars')
st.write('BILL_AMT: Amount of bill statement   PAY_AMT: Amount of previous payment')

# data.head()

# data.info()

# corr = data.corr()
# st.pyplot(sns.heatmap(corr, annot=True, vmin=-1.0, cmap='mako'))

# {'EDUCATION': 'EDU'}.items()

# def onehot_encode(df, column_dict):
#     df = df.copy()
#     for column, prefix in column_dict.items():
#         dummies = pd.get_dummies(df[column], prefix=prefix)
#         df = pd.concat([df, dummies], axis=1)
#         df = df.drop(column, axis=1)
#     return df

# def preprocess_inputs(df):
#     df = df.copy()
    
#     # Drop ID
#     df = df.drop('ID', axis=1)
    
#     df = onehot_encode(
#         df,
#         {
#             'EDUCATION': 'EDU',
#             'MARRIAGE': 'MAR'
#         }
#     )
    
#     # Split df into X and y
#     y = df['default.payment.next.month'].copy()
#     X = df.drop('default.payment.next.month', axis=1).copy()
    
#     # Scale X with a standard scaler
#     scaler = StandardScaler()
#     X = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)
    
#     return X, y

# X, y = preprocess_inputs(data)

# X

# y

# {column: len(X[column].unique()) for column in X.columns}

# X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=123)

# model1 = LogisticRegression()
# model2 =  SVC()               
# model3 =  MLPClassifier()      


# model1.fit(X_train, y_train)
# model2.fit(X_train, y_train)
# model3.fit(X_train, y_train)

# name1,name2,name3 = 'Logistic Regression','Support Vector Machine','Neural Network'

# # print(name1 + ": {:.2f}%".format(model1.score(X_test, y_test) * 100))
# # print(name2 + ": {:.2f}%".format(model2.score(X_test, y_test) * 100))
# # print(name3 + ": {:.2f}%".format(model3.score(X_test, y_test) * 100))

# models = [model1,model2,model3]

# def save_models(models):
#   for i in range(len(models)):
#     filename = 'model'+ str(i+1)
#     pickle.dump(models[i], open(filename, 'wb'))

# save_models(models)


data = pd.read_excel(option1)

def predictions(statements,num):
  filename = 'model'+str(num)
  mod = pickle.load(open(filename, 'rb'))
  pre = mod.predict(statements)
  results = []
  for i in pre:
    if i==0:
      results.append('SAFE')
    else:
      results.append('DEFAULT')
  print(filename) 
  return results

st.subheader('Predicting Using ' + option2)

if option2=='Logistic Regression':
  option2=1
else :
  option2=3

preds =  pd.DataFrame(predictions(data,option2))
st.write(preds)

st.subheader('Relation between Bill Amounts in Consecutive Months')
chartdata1 = pd.DataFrame(data[:500],columns=['BILL_AMT1','BILL_AMT2','BILL_AMT3','BILL_AMT4','BILL_AMT5','BILL_AMT6'])
st.bar_chart(chartdata1)

st.subheader('Relation between Payment Amounts in Consecutive Months')
chartdata2 = pd.DataFrame(data[:500],columns=['PAY_AMT1','PAY_AMT2','PAY_AMT3','PAY_AMT4','PAY_AMT5','PAY_AMT6'])
st.bar_chart(chartdata2)

